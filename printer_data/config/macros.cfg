#####################################################################
#   Macros
#####################################################################


[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32
   
##################################################################
# 	PRINT_START
##################################################################

[gcode_macro PRINT_START]
gcode:
  {% set BED_TEMP = params.BED|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER|default(195)|float %}
  {% set S_EXTRUDER_TEMP = 150|float %}
  {% set initial_tool = params.TOOL|int %}

  G90 # use absolute coordinates
  M83 # extruder relative mode

  status_heating
  M140 S{BED_TEMP} # Set bed temp
  M109 S150 # wait for extruder temp

  status_homing
  Cartographer_QGL # Home Printer
  status_meshing
  BED_MESH_CALIBRATE # bed meshing
  status_calibrating_z
  CARTOGRAPHER_TOUCH # calculate z offset
  
  AFC_PARK
  status_heating
  M140 S{BED_TEMP} # Set bed temp
  M109 S{EXTRUDER_TEMP} # wait for extruder temp
  status_busy
  T{initial_tool} #Load Initial Tool
  status_heating
  M104 S{S_EXTRUDER_TEMP} # set standby extruder temp
  M190 S{BED_TEMP} # wait for bed temp
  
  AFC_PARK # move the head
  status_heating
  M109 S{EXTRUDER_TEMP} # wait for extruder temp

  status_busy
  M117 Turning filter on...                 	    ; display message
  SET_FAN_SPEED FAN=Nevermore SPEED=1 # turn Nevermore fan on
  G92 E0 # zero the extruder
  M117 Logo Purge...							    ; display message
  VORON_PURGE # Adaptive Purge
  status_printing

##################################################################
# 	PRINT_END
##################################################################

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    status_busy
    BT_TOOL_UNLOAD
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder # G1 E-10.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=180
    AFC_PARK
    RESET_AFC_MAPPING
    status_part_ready
    M300 S1000 P50
    M300 S1000 P400
    M117 Part Complete!




##################################################################
# 	LIGHTS
##################################################################

[gcode_macro LIGHTS_OFF]
gcode:
  SET_LED LED="chamber_lights" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
  SET_LED LED="sb_leds" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob

[delayed_gcode setdisplayneopixel]
initial_duration: 2
gcode:
        SET_LED LED="chamber_lights" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
        SET_LED LED="sb_leds" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1
        status_ready
        M300 S250 P50
        M300 S500 P50
        M300 S1000 P400

[gcode_macro LIGHTS_ON]
gcode:
        SET_LED LED="chamber_lights" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
        SET_LED LED="sb_leds" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1


##################################################################
# 	CARTOGRAPHER QUAD GANTRY LEVEL
##################################################################

[gcode_macro Cartographer_QGL] # safer and faster QGL for Cartographer
gcode:
    status_homing
    G28 # or use a conditional or safe homing
    status_leveling
    QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000
    QUAD_GANTRY_LEVEL horizontal_move_z=3
    status_homing
    G28 Z
    status_ready

##################################################################
# 	MOTOR SYNC
##################################################################

[gcode_macro MOTORS_SYNC] # safer and faster QGL for Cartographer
gcode:
    SYNC_MOTORS

##################################################################
# 	HOME FAST QGL SYNC PARK
##################################################################

[gcode_macro GANTRY_STARTUP] # safer and faster QGL for Cartographer
gcode:
    Cartographer_QGL
    SYNC_MOTORS
    G28 Y X
    AFC_PARK
    status_ready

##################################################################
# 	AFC_BRUSH with +Z movement
##################################################################

[gcode_macro AFC_BRUSH_Z] # safer and faster QGL for Cartographer
gcode:
    AFC_BRUSH
    G91
    G1 Z+5 F2500
    G90
    AFC_PARK

##################################################################
# 	Spoolman Macros
##################################################################

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}



